---
version: 2.1

debian-steps: &debian-steps
  steps:
    - checkout
    - run: ci/circleci-build-debian.sh
    - run: sh -c "cd /build-$OCPN_TARGET; /bin/bash < upload.sh"
    - run: sh -c "ci/git-push.sh /build-$OCPN_TARGET"

flatpak-steps: &flatpak-steps
  steps:
    - checkout
    - restore_cache:
        keys:
          - <<parameters.cache-key>>-{{ checksum "ci/circleci-build-flatpak.sh" }}
    - run: ci/circleci-build-flatpak.sh
    - save_cache:
        key: <<parameters.cache-key>>-{{ checksum "ci/circleci-build-flatpak.sh" }}
        paths:
          - /home/circleci/.local/share/flatpak/repo
    - run: cd /build-flatpak; /bin/bash < upload.sh
    - run: ci/git-push.sh /build-flatpak

jobs:

  build-bionic-gtk3-armhf:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    environment:
      - OCPN_TARGET: ubuntu-gtk3-armhf
      - OCPN_TARGET_TUPLE: ubuntu;18.04;armhf
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    parameters:
      cache-key:
        type: string
        default: "fp-arm20-v2"
    steps:
      - checkout
      - run: ci/circleci-build-bionic-armhf.sh
      - run: cd build-ubuntu; /bin/bash < upload.sh
      - run: ci/git-push.sh build-ubuntu

  build-focal-armhf:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    environment:
      - OCPN_TARGET: ubuntu-gtk3-armhf
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    parameters:
      cache-key:
        type: string
        default: "fp-arm20-v2"
    steps:
      - checkout
      - run: ci/circleci-build-focal-armhf.sh
      - run: cd build-ubuntu; /bin/bash < upload.sh
      - run: ci/git-push.sh build-ubuntu

  build-flatpak-arm64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    environment:
      - OCPN_TARGET: flatpak-arm64
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    parameters:
      cache-key:
        type: string
        default: "fp-arm20-v2"
    <<: *flatpak-steps

  build-flatpak-x86-2008:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      - OCPN_TARGET: flatpak
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    parameters:
      cache-key:
        type: string
        default: "fp-x86-20-v2"
    <<: *flatpak-steps


  build-macos:
    macos:
      xcode: "12.5.1"
    environment:
      - OCPN_TARGET: macos
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    steps:
      - checkout
      - run: ci/circleci-build-macos.sh
      - run: >
          sh -c "otool -L build-osx/app/*/OpenCPN.app/Contents/PlugIns/*.dylib"
      - run: cd build-osx; /bin/bash < upload.sh
      - run: ci/git-push.sh  build-osx

  build-bionic:
    docker:
      - image: cimg/base:stable-18.04
    environment:
      - OCPN_TARGET: bionic
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    <<: *debian-steps

  build-bionic-gtk3:
    docker:
      - image: cimg/base:stable-18.04
    environment:
      - BUILD_GTK3: true
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
      - OCPN_TARGET: bionic-gtk3
    <<: *debian-steps

  build-focal:
    docker:
      - image: cimg/base:stable-20.04
    environment:
      - OCPN_TARGET: focal
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    <<: *debian-steps

  build-jammy:
    docker:
      - image: cimg/base:edge-22.04
    environment:
      - OCPN_TARGET: jammy
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    <<: *debian-steps

  build-buster:
    docker:
      - image: circleci/buildpack-deps:buster-scm
    environment:
      - OCPN_TARGET: buster
      - OCPN_TARGET_TUPLE: debian;10;x86_64
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    <<: *debian-steps

  build-android-arm64:
    docker:
      - image: circleci/android:api-28-ndk
    environment:
      - OCPN_TARGET: android-aarch64
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    steps:
      - checkout
      - run: ci/circleci-build-android.sh
      - run: sh -c "cd /build-$OCPN_TARGET; /bin/bash < upload.sh"
      - run: sh -c "ci/git-push.sh /build-$OCPN_TARGET"

  build-android-armhf:
    docker:
      - image: circleci/android:api-28-ndk
    environment:
      - OCPN_TARGET: android-armhf
      - CMAKE_BUILD_PARALLEL_LEVEL: 2
    steps:
      - checkout
      - run: ci/circleci-build-android.sh
      - run: sh -c "cd /build-$OCPN_TARGET; /bin/bash < upload.sh"
      - run: sh -c "ci/git-push.sh /build-$OCPN_TARGET"

  build-arm64-debian-bullseye:
        machine:
            image: ubuntu-2004:202104-01
        environment:
        - OCPN_TARGET=bullseye-arm64
        - DOCKER_IMAGE=arm64v8/debian:bullseye-backports
        - BUILD_FLAGS=-j3
        - BUILD_ENV=debian
        - BUILD_GTK3: true
        steps:
        - checkout
        - run: chmod a+x ./ci/*.sh
        - run:
            command: ci/circleci-build-debian-armxx.sh
            no_output_timeout: 30m
        - run: sh -c "python3 -m pip install --user --upgrade -q setuptools wheel pip"
        - run: sh -c "python3 -m pip install --user -q cloudsmith-cli cryptography"
        - run: sh -c "pip install --upgrade cloudsmith-cli"
        - run: sh -c "pwd; ls; cd build; ls; /bin/bash < upload.sh"

  build-armhf-debian-bullseye:
        machine:
            image: ubuntu-2004:202104-01
        environment:
        - OCPN_TARGET=bullseye-armhf
        - DOCKER_IMAGE=arm32v7/debian:bullseye-backports
        - BUILD_FLAGS=-j3
        - BUILD_ENV=debian
        - BUILD_GTK3: true
        steps:
        - checkout
        - run: chmod a+x ./ci/*.sh
        - run:
            command: ci/circleci-build-debian-armxx.sh
            no_output_timeout: 30m
        - run: sh -c "python3 -m pip install --user --upgrade -q setuptools wheel pip"
        - run: sh -c "python3 -m pip install --user -q cloudsmith-cli cryptography"
        - run: sh -c "pip install --upgrade cloudsmith-cli"
        - run: sh -c "pwd; ls; cd build; ls; /bin/bash < upload.sh"

std-filters: &std-filters
  filters:
    branches:
      ignore:
        - tmp
        - /tmp-.*/

workflows:
  version: 2
  build_all:
    jobs:

      - build-macos:
          <<: *std-filters

      - build-bionic-gtk3:
          <<: *std-filters

      - build-bionic:
          <<: *std-filters

      - build-focal:
          <<: *std-filters

      - build-jammy:
          <<: *std-filters

      - build-buster:
          <<: *std-filters

      - build-android-arm64:
          <<: *std-filters

      - build-android-armhf:
          <<: *std-filters

      - build-bionic-gtk3-armhf:
          <<: *std-filters

      - build-focal-armhf:
          <<: *std-filters

      - build-arm64-debian-bullseye:
          <<: *std-filters

      - build-armhf-debian-bullseye:
          <<: *std-filters
